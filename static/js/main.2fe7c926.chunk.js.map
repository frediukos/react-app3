{"version":3,"sources":["img/logo_alex_circle2.png","components/MenuItem.js","components/Menu.js","components/Header.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuItem","props","onClick","pressBtn","item","Menu","menu","map","el","key","Header","className","src","logo","alt","width","pressLogo","Body","bodyText","App","console","log","btn","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,+C,0ICiB5BC,MAbf,SAAkBC,GAMhB,OACM,4BACE,4BAAQC,QANF,WACZD,EAAME,SAASF,EAAMG,QAKUH,EAAMG,QCG1BC,MAXf,SAAcJ,GACZ,OACE,6BACE,4BACIA,EAAMK,KAAKC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAUC,IAAKD,EAAIJ,KAAMI,EAAIL,SAAUF,EAAME,iB,gBCO7DO,MAVf,SAAgBT,GACd,OACE,yBAAKU,UAAU,UACb,yBAAKC,IAAKC,IAAMC,IAAI,YAAYC,MAAO,IAAKb,QAAS,WAAOD,EAAMe,eAClE,kBAAC,EAAD,CAAMV,KAAML,EAAMK,KAAMH,SAAUF,EAAME,aCO/Bc,MAbf,SAAchB,GACZ,OACE,6BACE,mEACA,4BAAQC,QAAS,WAAOD,EAAMiB,SAAN,sEAAxB,gBCuBSC,MAzBf,WAiBE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,CAAQL,KAjBC,CAAC,QAAS,QAAS,WAAY,OAAQ,YAiB5BU,UAXJ,WAClBI,QAAQC,IAAI,2BAUkClB,SAP/B,SAACmB,GAChBF,QAAQC,IAAR,4BAAiCC,EAAjC,aAOE,kBAAC,EAAD,CAAMJ,SAhBO,SAACK,GAChBH,QAAQC,IAAIE,QCEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.2fe7c926.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_alex_circle2.8248b08a.png\";","import React from 'react';\nimport '../App.css';\n\n\nfunction MenuItem(props) {\n\n  const press = () => {\n    props.pressBtn(props.item)\n  };\n\n  return (\n        <li>\n          <button onClick={press}>{props.item}</button>\n        </li>\n  );\n}\n\nexport default MenuItem;\n","import React from 'react';\nimport '../App.css';\nimport MenuItem from \"./MenuItem\";\n\nfunction Menu(props) {\n  return (\n    <div>\n      <ul>\n        { props.menu.map(el => <MenuItem key={el} item={el} pressBtn={props.pressBtn}/>) }\n      </ul>\n    </div>\n\n  );\n}\n\nexport default Menu;\n","import React from 'react';\nimport '../App.css';\nimport Menu from \"./Menu\";\nimport logo from '../img/logo_alex_circle2.png';\n\nfunction Header(props) {\n  return (\n    <div className='header'>\n      <img src={logo} alt='Alex Logo' width={150} onClick={() => {props.pressLogo()} } />\n      <Menu menu={props.menu} pressBtn={props.pressBtn}/>\n    </div>\n\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport '../App.css';\n\nfunction Body(props) {\n  return (\n    <div>\n      <p>To see the message in Console Tab   </p>\n      <button onClick={() => {props.bodyText(`Hello!\n    You can press on LOGO\n    or\n    on  MENU items...`)}}> PRESS ME </button>\n    </div>\n\n  );\n}\n\nexport default Body;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\n\nfunction App() {\n\n  const menu = ['About', 'Video', 'Pictures', 'Shop', 'Contacts'];\n\n  const bodyText = (text) => {\n    console.log(text);\n  };\n\n  const pressOnLogo = () => {\n    console.log(\"You've pressed on logo\");\n  };\n\n  const pressBtn = (btn) => {\n    console.log(`You've pressed on ${btn} item`);\n  };\n\n\n  return (\n    <div className=\"App\">\n      <Header menu={menu} pressLogo={pressOnLogo} pressBtn={pressBtn} />\n      <Body bodyText={bodyText}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}